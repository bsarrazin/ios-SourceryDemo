import UIKit

{% for type in types.implementing.AutoEncodable %}
extension {{type.name}}: Codable {

    enum CodingKeys: String, CodingKey {
        {% for variable in type.storedVariables %}
        case {{variable.name}}{% if variable.annotations.AutoEncodableKey %} = "{{variable.annotations.AutoEncodableKey}}"{% endif %}
        {% endfor %}
    }

    init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        {% for variable in type.storedVariables %}
        {{variable.name}} = try values.decode({{variable.typeName}}.self, forKey: .{{variable.name}})
        {% endfor %}
    }

    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        {% for variable in type.storedVariables %}
        try container.encode({{variable.name}}, forKey: .{{variable.name}})
        {% endfor %}
    }

}

{% endfor %}
